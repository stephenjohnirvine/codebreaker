{"version":3,"sources":["components/Header/Header.tsx","components/Landing/Landing.tsx","components/Player/Player.tsx","components/Players/Players.tsx","components/GameLobby/GameLobby.tsx","components/Cypher/Cypher.tsx","components/TransmissionHistory/TransmissionHistory.tsx","components/Code/ArrayVis.tsx","components/CreateTransmission/CreateTransmission.tsx","components/GuessCode/GuessCode.tsx","components/TransmissionSent/TransmissionSent.tsx","components/WaitingForTransmission/WaitingForTransmission.tsx","components/GuessSubmitted/GuessSubmitted.tsx","components/ViewResults/ViewResults.tsx","components/YourTeam/YourTeam.tsx","components/OtherTeam/OtherTeam.tsx","components/GameStatus/GameStatus.tsx","components/GameRunning/GameRunning.tsx","components/GameOver/GameOver.tsx","components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","axios","defaults","proxy","host","port","Landing","history","useHistory","onClick","get","then","gameId","push","data","catch","err","console","error","Player","player","className","name","status","join","Players","players","colSpan","map","key","id","GameLobby","props","me","find","myId","undefined","Error","gameCanStart","length","every","disabled","value","window","location","href","style","width","onChange","event","onNameChange","target","onGameStart","Cypher","cypher","arr","num","TransmissionHistory","tableContents","transmissions","code","transmission","c","idxs","findIndex","fourArr","row","index","ArrayVis","CreateTransmission","onSend","useState","code0","setCode0","code1","setCode1","code2","setCode2","asArray","setter","validEncodings","GuessCode","onGuess","setCode","v","Number","isNaN","validInput","input","validInputs","TransmissionSent","WaitingForTransmission","GuessSubmitted","guess","ViewResults","guesses","transmitterTeam","onEndTurn","interceptingTeam","wasInterception","JSON","stringify","wasTransmissionFailure","extra","team","YourTeam","contextComponent","game","onTransmit","currentTurn","currentStatus","type","encryptor","getPlayerStatus","encryptorTeam","teamTurnHistory","filter","turn","OtherTeam","GameStatus","Math","floor","interceptions","transmission_fails","GameRunning","onTeamGuess","myTeam","red","otherTeam","GameOver","winner","Game","socket","existingId","cookies","state","match","params","this","io","query","userId","addEventListener","componentCleanup","on","set","setState","removeEventListener","emit","disconnect","close","child","bind","React","Component","withCookies","withRouter","App","exact","path","Boolean","hostname","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f8e9f726.chunk.js","sourcesContent":["import React from 'react';\n\nexport type HeaderProps = {};\n\nexport const Header = () => (\n  <div>\n    <h1>Codebreaker!</h1>\n  </div>\n);\n","import React from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\naxios.defaults.proxy = {\n  host: 'localhost',\n  port: 3001,\n};\n\nexport const Landing = () => {\n  const history = useHistory();\n\n  const newGame = () => {\n    axios\n      .get('/new')\n      .then((gameId) => {\n        history.push(`/game/${gameId.data}`);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return <button onClick={newGame}>Start New Game</button>;\n};\n","import React from 'react';\n\nimport { Player as PlayerClass } from '../../types/player';\nimport './Player.css';\n\nexport type PlayerProps = {\n  player: PlayerClass;\n};\nexport const Player = ({ player }: PlayerProps) => (\n  <div>\n    <div className=\"player\">\n      <div className=\"name\">{player.name}</div>\n      <span\n        className={[\n          'dot',\n          player.status === 'connected' ? 'connected' : 'disconnected',\n        ].join(' ')}\n      />\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport { Player as PlayerClass } from '../../types/player';\nimport { Player } from '../Player/Player';\n\nexport type PlayersProps = {\n  players: PlayerClass[];\n};\n\nexport const Players = ({ players }: PlayersProps) => (\n  <table>\n    <thead>\n      <tr>\n        <th colSpan={2}>Players</th>\n      </tr>\n    </thead>\n    <tbody>\n      {players.map((player: any) => {\n        return (\n          <tr key={player.id}>\n            <Player player={player} />\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { Players } from '../Players/Players';\nimport { Player } from '../../types/player';\nimport { PlayerID } from '../../types/gameState';\n\nexport interface GameLobbyProps {\n  players: Player[];\n  myId: PlayerID;\n  onNameChange: (name: string) => void;\n  onGameStart: () => void;\n}\n\nexport const GameLobby = (props: GameLobbyProps) => {\n  const me = props.players.find((player) => player.id === props.myId);\n  if (me === undefined) {\n    throw new Error('Me no exist');\n  }\n\n  const gameCanStart: boolean =\n    props.players.length > 3 &&\n    props.players.every((player) => player.name !== '');\n\n  return (\n    <div>\n      <h3>Waiting for players to join...</h3>\n      <p>\n        Game link:\n        <input\n          disabled\n          value={window.location.href}\n          style={{ width: '500px' }}\n        />\n      </p>\n      <p>\n        Please enter your name:{' '}\n        <input\n          value={me.name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            props.onNameChange(event.target.value)\n          }\n        />\n      </p>\n      <Players players={props.players} />\n      <button disabled={!gameCanStart} onClick={props.onGameStart}>\n        Start the Game!\n      </button>\n      <p>(You need 4 players to start)</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Cypher as CypherClass } from '../../types/gameState';\nimport './Cypher.css';\n\nexport type CypherProps = {\n  cypher: CypherClass;\n};\n\nexport const Cypher = ({ cypher }: CypherProps) => {\n  const arr = [0, 1, 2, 3];\n\n  return (\n    <div className=\"cypher\">\n      <div className=\"cypherTitle\">Your Team{\"'\"}s Cypher</div>\n      <div className=\"cypherRow\">\n        {arr.map((num) => (\n          <div className=\"cypherIndex cypherRowItem\" key={num}>{`${\n            num + 1\n          }`}</div>\n        ))}\n      </div>\n      <div className=\"cypherRow\">\n        {arr.map((num) => (\n          <div className=\"cypherWord cypherRowItem\" key={num}>\n            {cypher[num]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Transmission, Code } from '../../types/gameState';\nimport './TransmissionHistory.css';\n\nexport type CompletedTransmision = {\n  code: Code;\n  transmission: Transmission;\n};\n\nexport type TeamHistoryProps = {\n  transmissions: CompletedTransmision[];\n};\n\nexport const TransmissionHistory = ({ transmissions }: TeamHistoryProps) => {\n  const tableContents = transmissions.map(\n    ({\n      code,\n      transmission,\n    }: CompletedTransmision): [string, string, string, string] => {\n      const c = code;\n      const idxs = [\n        c.findIndex((num) => num === 1),\n        c.findIndex((num) => num === 2),\n        c.findIndex((num) => num === 3),\n        c.findIndex((num) => num === 4),\n      ];\n\n      return [\n        idxs[0] !== -1 ? transmission[idxs[0]] : '',\n        idxs[1] !== -1 ? transmission[idxs[1]] : '',\n        idxs[2] !== -1 ? transmission[idxs[2]] : '',\n        idxs[3] !== -1 ? transmission[idxs[3]] : '',\n      ];\n    }\n  );\n\n  const fourArr = [0, 1, 2, 3];\n\n  return (\n    <div className=\"transmissionHistory\">\n      <div className=\"historyTitle\">Transmission history</div>\n      <div className=\"historyRow\">\n        {fourArr.map((num) => (\n          <div className=\"historyIndex historyRowItem\" key={num}>{`${\n            num + 1\n          }`}</div>\n        ))}\n      </div>\n      {tableContents.map((row, index) => (\n        <div key={index} className=\"historyRow\">\n          {fourArr.map((num) => (\n            <div\n              className={`${\n                row[num] === '' ? '' : 'historyEntry'\n              } historyRowItem`}\n              key={num}\n            >\n              {row[num]}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Code, Transmission } from '../../types/gameState';\nimport './ArrayVis.css';\n\nexport type ArrayVisProps = {\n  data: Code | Transmission;\n};\n\nexport const ArrayVis = ({ data }: ArrayVisProps) => (\n  <div className=\"code\">[{data.join(', ')}]</div>\n);\n","import React, { useState } from 'react';\nimport { Code, Transmission } from '../../types/gameState';\nimport './CreateTransmission.css';\nimport { ArrayVis } from '../Code/ArrayVis';\n\nexport type CreateTransmissionProps = {\n  code: Code;\n  onSend: (transmission: Transmission) => void;\n};\n\nexport const CreateTransmission = ({\n  code,\n  onSend,\n}: CreateTransmissionProps) => {\n  const [code0, setCode0] = useState('');\n  const [code1, setCode1] = useState('');\n  const [code2, setCode2] = useState('');\n\n  type ArrRow = {\n    code: number;\n    setter: typeof setCode0;\n  };\n  const asArray: ArrRow[] = [\n    { code: code[0], setter: setCode0 },\n    { code: code[1], setter: setCode1 },\n    { code: code[2], setter: setCode2 },\n  ];\n\n  const validEncodings = code0 !== '' && code1 !== '' && code2 !== '';\n\n  return (\n    <div className=\"transmission\">\n      <div className=\"title transRow\">\n        Code:\n        <ArrayVis data={code} />\n      </div>\n\n      <div className=\"transRows\">\n        {asArray.map(({ code, setter }: ArrRow, index: number) => (\n          <div className=\"transRow\" key={index}>\n            <div className=\"codeDigit\">{code}</div>\n            <input\n              className=\"digitEncoding\"\n              onChange={(event) => setter(event.target.value)}\n            ></input>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"transRow\">\n        <button\n          className=\"button\"\n          id=\"send\"\n          onClick={() => onSend([code0, code1, code2])}\n          disabled={!validEncodings}\n        >\n          Transmit\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Code, Transmission } from '../../types/gameState';\nimport './GuessCode.css';\nimport { ArrayVis } from '../Code/ArrayVis';\n\nexport type GuessCodeProps = {\n  transmission: Transmission;\n  onGuess: (code: Code) => void;\n};\n\nexport const GuessCode = ({ transmission, onGuess }: GuessCodeProps) => {\n  const [code0, setCode0] = useState<number | undefined>(undefined);\n  const [code1, setCode1] = useState<number | undefined>(undefined);\n  const [code2, setCode2] = useState<number | undefined>(undefined);\n\n  const setCode = (\n    setCode: typeof setCode0\n  ): ((event: React.ChangeEvent<HTMLInputElement>) => void) => {\n    return (event) => {\n      const v = Number(event.target.value);\n\n      if (isNaN(v)) {\n        setCode(undefined);\n        return;\n      }\n\n      setCode(v);\n    };\n  };\n\n  type ArrRow = {\n    transmission: string;\n    setter: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  };\n  const asArray: ArrRow[] = [\n    { transmission: transmission[0], setter: setCode(setCode0) },\n    { transmission: transmission[1], setter: setCode(setCode1) },\n    { transmission: transmission[2], setter: setCode(setCode2) },\n  ];\n\n  const validInput = (input: number | undefined): boolean => {\n    if (input === undefined) {\n      return false;\n    }\n\n    return input > 0 && input <= 4;\n  };\n\n  const validInputs =\n    validInput(code0) && validInput(code1) && validInput(code2);\n\n  return (\n    <div className=\"transmission\">\n      <div className=\"title transRow\">\n        Transmission:\n        <ArrayVis data={transmission} />\n      </div>\n\n      <div className=\"transRows\">\n        {asArray.map(({ transmission, setter }: ArrRow, index: number) => (\n          <div className=\"transRow\" key={index}>\n            <div className=\"transmissionElement\">{transmission}</div>\n            <input className=\"codeEntry\" onChange={setter}></input>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"transRow\">\n        <button\n          className=\"button\"\n          id=\"send\"\n          onClick={() => onGuess([code0, code1, code2] as Code)}\n          disabled={!validInputs}\n        >\n          Decrypt Code\n        </button>\n      </div>\n    </div>\n  );\n\n  /*\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan={3}>Transmission:</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{transmission[0]}</td>\n            <td>{transmission[1]}</td>\n            <td>{transmission[2]}</td>\n          </tr>\n          <tr>\n            <td>\n              <input onChange={setCode(setCode0)}></input>\n            </td>\n            <td>\n              <input onChange={setCode(setCode1)}></input>\n            </td>\n            <td>\n              <input onChange={setCode(setCode2)}></input>\n            </td>\n          </tr>\n          <tr>\n            <td colSpan={3}>\n              <button\n                id=\"send\"\n                disabled={!validInputs}\n                onClick={() => {\n                  // Button is disabled if they are not valid\n                  onGuess([code0, code1, code2] as Code);\n                }}\n              >\n                Send\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n  */\n};\n","import React from 'react';\nimport { Code, Transmission } from '../../types/gameState';\nimport './TransmissionSent.css';\nimport { ArrayVis } from '../Code/ArrayVis';\n\ntype TransmissionSentProps = {\n  code: Code;\n  transmission: Transmission;\n};\n\nexport const TransmissionSent = ({\n  code,\n  transmission,\n}: TransmissionSentProps) => {\n  return (\n    <div className=\"transSentSub\">\n      <div className=\"transSentSubRow\">\n        Code was:\n        <ArrayVis data={code} />\n      </div>\n      <div className=\"transSentSubRow\">\n        You transmitted:\n        <ArrayVis data={transmission} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './WaitingForTransmission.css';\n\nexport const WaitingForTransmission = () => (\n  <div className=\"waitingForTransmission\">Waiting for transmission...</div>\n);\n","import React from 'react';\nimport { Code, Transmission } from '../../types/gameState';\nimport './GuessSubmitted.css';\nimport { ArrayVis } from '../Code/ArrayVis';\n\ntype GuessSubmittedProps = {\n  guess: Code;\n  transmission: Transmission;\n};\n\nexport const GuessSubmitted = ({\n  guess,\n  transmission,\n}: GuessSubmittedProps) => {\n  return (\n    <div className=\"guessSub\">\n      <div className=\"guessSubRow\">\n        Transmission was: <ArrayVis data={transmission} />\n      </div>\n      <div className=\"guessSubRow\">\n        Your team submitted code: <ArrayVis data={guess} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Code, Transmission, TeamID } from '../../types/gameState';\nimport { ArrayVis } from '../Code/ArrayVis';\nimport './ViewResults.css';\n\nexport type ViewResultsProps = {\n  code: Code;\n  transmission: Transmission;\n  guesses: {\n    red: Code;\n    blue: Code;\n  };\n  transmitterTeam: TeamID;\n  onEndTurn: () => void;\n};\nexport const ViewResults = ({\n  code,\n  transmission,\n  guesses,\n  transmitterTeam,\n  onEndTurn,\n}: ViewResultsProps) => {\n  const interceptingTeam = transmitterTeam === 'red' ? 'blue' : 'red';\n\n  const wasInterception =\n    JSON.stringify(guesses[interceptingTeam]) === JSON.stringify(code);\n  const wasTransmissionFailure =\n    JSON.stringify(guesses[transmitterTeam]) !== JSON.stringify(code);\n\n  const teams: TeamID[] = ['red', 'blue'];\n\n  const extra = {\n    [transmitterTeam]: wasTransmissionFailure ? (\n      <div className=\"resultTransFail resultShared\">Transmission Failure</div>\n    ) : undefined,\n    [interceptingTeam]: wasInterception ? (\n      <div className=\"resultInterception resultShared\">Interception</div>\n    ) : undefined,\n  };\n\n  return (\n    <div className=\"resultMain\">\n      <div>\n        The code was <ArrayVis data={code} />\n      </div>\n      <div>\n        The {transmitterTeam} team transmitted <ArrayVis data={transmission} />\n      </div>\n      {teams.map((team) => (\n        <div key={team}>\n          The {team} team guessed <ArrayVis data={guesses[team]} />\n          {extra[team]}\n        </div>\n      ))}\n\n      <div className=\"resultEndRow\">\n        <button className=\"resultEndTurn\" onClick={onEndTurn}>\n          End Turn\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  GameState,\n  TeamID,\n  PlayerID,\n  CompletedTurn,\n  Transmission,\n  Code,\n  Turn,\n} from '../../types/gameState';\nimport { Cypher } from '../Cypher/Cypher';\nimport { TransmissionHistory } from '../TransmissionHistory/TransmissionHistory';\nimport { CreateTransmission } from '../CreateTransmission/CreateTransmission';\nimport { GuessCode } from '../GuessCode/GuessCode';\nimport { TransmissionSent } from '../TransmissionSent/TransmissionSent';\nimport { WaitingForTransmission } from '../WaitingForTransmission/WaitingForTransmission';\nimport { GuessSubmitted } from '../GuessSubmitted/GuessSubmitted';\nimport './YourTeam.css';\nimport { ViewResults } from '../ViewResults/ViewResults';\n\nexport type YourTeamProps = {\n  game: GameState;\n  team: TeamID;\n  me: PlayerID;\n  onTransmit: (transmission: Transmission) => void;\n  onGuess: (code: Code) => void;\n  onEndTurn: () => void;\n};\n\ntype PlayerStatus =\n  | 'TRANSMITTING'\n  | 'WAITING'\n  | 'GUESSING'\n  | 'TRANSMITTED'\n  | 'GUESSED'\n  | 'VIEWING_RESULTS';\n\nconst getPlayerStatus = (\n  currentTurn: Turn,\n  me: PlayerID,\n  team: TeamID\n): PlayerStatus => {\n  if (currentTurn.type === 'COMPLETE') {\n    return 'VIEWING_RESULTS';\n  }\n\n  if (currentTurn.encryptor === me) {\n    if (currentTurn.transmission === undefined) {\n      return 'TRANSMITTING';\n    }\n\n    return 'TRANSMITTED';\n  }\n\n  if (currentTurn.transmission === undefined) {\n    return 'WAITING';\n  }\n\n  if (\n    currentTurn.guesses === undefined ||\n    currentTurn.guesses[team] === undefined\n  ) {\n    return 'GUESSING';\n  }\n\n  return 'GUESSED';\n};\n\nexport const YourTeam = ({\n  game,\n  team,\n  me,\n  onTransmit,\n  onGuess,\n  onEndTurn,\n}: YourTeamProps) => {\n  const currentTurn = game.history[game.history.length - 1];\n\n  const currentStatus: PlayerStatus = getPlayerStatus(currentTurn, me, team);\n\n  let contextComponent;\n  if (currentStatus === 'TRANSMITTING') {\n    contextComponent = (\n      <CreateTransmission code={currentTurn.code} onSend={onTransmit} />\n    );\n  } else if (currentStatus === 'TRANSMITTED') {\n    contextComponent = (\n      <TransmissionSent\n        transmission={currentTurn.transmission as Transmission}\n        code={currentTurn.code}\n      />\n    );\n  } else if (currentStatus === 'WAITING') {\n    contextComponent = <WaitingForTransmission />;\n  } else if (currentStatus === 'GUESSING') {\n    contextComponent = (\n      <GuessCode\n        transmission={currentTurn.transmission as Transmission}\n        onGuess={onGuess}\n      />\n    );\n  } else if (currentStatus === 'GUESSED') {\n    const guesses = currentTurn.guesses;\n    if (guesses === undefined) {\n      throw new Error('Status guessed but no guesses exist');\n    }\n    contextComponent = (\n      <GuessSubmitted\n        transmission={currentTurn.transmission as Transmission}\n        guess={guesses[team] as Code}\n      />\n    );\n  } else if (currentStatus === 'VIEWING_RESULTS') {\n    const guesses = currentTurn.guesses;\n    const code = currentTurn.code;\n    contextComponent = (\n      <ViewResults\n        code={code}\n        transmission={currentTurn.transmission as Transmission}\n        guesses={guesses as { red: Code; blue: Code }}\n        transmitterTeam={currentTurn.encryptorTeam}\n        onEndTurn={onEndTurn}\n      />\n    );\n  }\n\n  const teamTurnHistory = game.history.filter(\n    (turn) => turn.type === 'COMPLETE' && turn.encryptorTeam === team\n  ) as CompletedTurn[];\n\n  return (\n    <div>\n      <div className={`teamTitle ${team}Team`}>You are on the {team} team!</div>\n      <Cypher cypher={game[team].cypher} />\n      {contextComponent}\n      <TransmissionHistory transmissions={teamTurnHistory} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { GameState, TeamID, CompletedTurn } from '../../types/gameState';\nimport { TransmissionHistory } from '../TransmissionHistory/TransmissionHistory';\n\ntype OtherTeamProps = {\n  game: GameState;\n  team: TeamID;\n};\n\nexport const OtherTeam = ({ game, team }: OtherTeamProps) => {\n  const teamTurnHistory = game.history.filter(\n    (turn) => turn.type === 'COMPLETE' && turn.encryptorTeam === team\n  ) as CompletedTurn[];\n\n  return (\n    <div>\n      <div className={`teamTitle ${team}Team`}>The {team} team</div>\n      <TransmissionHistory transmissions={teamTurnHistory} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { GameState } from '../../types/gameState';\n\ntype GameStatusProps = {\n  game: GameState;\n};\n\nexport const GameStatus = ({ game }: GameStatusProps) => {\n  return (\n    <div>\n      <h3>Game Status:</h3>\n      <p>Turn: {Math.floor(game.history.length / 2) + 1}</p>\n      <p>\n        Interceptions: (Red: {game['red'].interceptions}) (Blue:{' '}\n        {game['blue'].interceptions})\n      </p>\n      <p>\n        Failed Transmissions: (Red: {game['red'].transmission_fails}) (Blue:{' '}\n        {game['blue'].transmission_fails})\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  GameState,\n  TeamID,\n  Transmission,\n  Code,\n  PlayerID,\n} from '../../types/gameState';\nimport { YourTeam } from '../YourTeam/YourTeam';\nimport { OtherTeam } from '../OtherTeam/OtherTeam';\nimport { GameStatus } from '../GameStatus/GameStatus';\nimport { Players } from '../Players/Players';\nimport './GameRunning.css';\n\nexport type GameRunningProps = {\n  game: GameState;\n  myId: PlayerID;\n  onTeamGuess: (team: TeamID, guess: Code) => void;\n  onTransmit: (transmission: Transmission) => void;\n  onEndTurn: () => void;\n};\n\nexport const GameRunning = ({\n  game,\n  myId,\n  onTransmit,\n  onTeamGuess,\n  onEndTurn,\n}: GameRunningProps) => {\n  const myTeam = game.red.players.find((player) => player === myId)\n    ? 'red'\n    : 'blue';\n\n  const otherTeam = myTeam === 'red' ? 'blue' : 'red';\n\n  return (\n    <div className=\"parent\">\n      <div className=\"mainPanel\">\n        <YourTeam\n          me={myId}\n          game={game}\n          team={myTeam}\n          onGuess={(code: Code) => onTeamGuess(myTeam, code)}\n          onTransmit={onTransmit}\n          onEndTurn={onEndTurn}\n        />\n      </div>\n      <div className=\"mainPanel\">\n        <OtherTeam team={otherTeam} game={game} />\n      </div>\n      <div className=\"sidePanel\">\n        <GameStatus game={game} />\n        <Players players={game.players} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TeamID } from '../../types/gameState';\n\ntype GameOverProps = {\n  winner: 'draw' | TeamID;\n};\n\nexport const GameOver = ({ winner }: GameOverProps) => {\n  if (winner === 'draw') {\n    return (\n      <div>\n        <h2>Draw!</h2>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h2>The {winner} team has won the game!</h2>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Player } from '../../types/player';\nimport {\n  GameState,\n  Code,\n  TeamID,\n  Transmission,\n  PlayerID,\n} from '../../types/gameState';\nimport { GameLobby } from '../GameLobby/GameLobby';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport { GameRunning } from '../GameRunning/GameRunning';\nimport { GameOver } from '../GameOver/GameOver';\n\nimport { withCookies, Cookies } from 'react-cookie';\n\ntype PathParamsType = {\n  id: string;\n};\n\ntype GameProps = RouteComponentProps<PathParamsType> & {\n  cookies: Cookies;\n};\ninterface GameReactState {\n  myId: PlayerID | 'pending';\n  game: GameState | 'pending';\n  gameId: string;\n}\n\nconst PLAYER_COOKIE_ID = 'codebreaker-player-id';\n\nclass Game extends React.Component<GameProps, GameReactState> {\n  private socket: SocketIOClient.Socket | undefined;\n\n  public constructor(props: GameProps) {\n    super(props);\n\n    const { cookies } = this.props;\n    const existingId = cookies.get(PLAYER_COOKIE_ID);\n\n    this.state = {\n      myId: existingId === undefined ? 'pending' : existingId,\n      gameId: this.props.match.params.id,\n      game: 'pending',\n    };\n  }\n\n  componentDidMount() {\n    this.socket = io({\n      query: {\n        gameId: this.state.gameId,\n        userId: this.state.myId,\n      },\n    });\n    //   this.socket = io(`/game/${this.props.match.params.id}`);\n    window.addEventListener('beforeunload', this.componentCleanup);\n\n    this.socket.on('welcome', (player: Player) => {\n      this.props.cookies.set(PLAYER_COOKIE_ID, player.id);\n      this.setState({\n        myId: player.id,\n      });\n    });\n    this.socket.on('game state', (game: GameState) => {\n      this.setState({\n        game,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.componentCleanup();\n    window.removeEventListener('beforeunload', this.componentCleanup); // remove the event handler for normal unmounting\n  }\n\n  componentCleanup() {\n    if (this.socket === undefined) {\n      throw new Error('No socket connection when unmounting');\n    }\n    this.socket.emit('disconnect');\n    this.socket.disconnect();\n    this.socket.close();\n  }\n\n  private onNameChange(name: string) {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n    this.socket.emit('player name', name);\n  }\n\n  private onGameStart() {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n    this.socket.emit('start game');\n  }\n\n  private onEndTurn() {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n    this.socket.emit('end turn');\n  }\n\n  private onTeamGuess(team: TeamID, guess: Code) {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n\n    this.socket.emit('guess', { team, guess });\n  }\n\n  private onTransmit(transmission: Transmission) {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n\n    this.socket.emit('transmission', transmission);\n  }\n\n  public render() {\n    const notFullyConnected =\n      this.socket === undefined ||\n      this.state.myId === 'pending' ||\n      this.state.game === 'pending' ||\n      this.state.game.players.findIndex(\n        (player) => player.id === this.state.myId\n      ) === -1;\n\n    let child;\n    if (notFullyConnected) {\n      child = <div>Connecting ...</div>;\n    } else if ((this.state.game as GameState).state === 'LOBBY') {\n      child = (\n        <GameLobby\n          players={(this.state.game as GameState).players}\n          myId={this.state.myId}\n          onNameChange={this.onNameChange.bind(this)}\n          onGameStart={this.onGameStart.bind(this)}\n        />\n      );\n    } else if ((this.state.game as GameState).state === 'RUNNING') {\n      child = (\n        <GameRunning\n          game={this.state.game as GameState}\n          myId={this.state.myId}\n          onTeamGuess={this.onTeamGuess.bind(this)}\n          onTransmit={this.onTransmit.bind(this)}\n          onEndTurn={this.onEndTurn.bind(this)}\n        />\n      );\n    } else if ((this.state.game as GameState).state === 'FINISHED') {\n      child = (\n        <GameOver\n          winner={(this.state.game as GameState).winner as 'draw' | TeamID}\n        />\n      );\n    }\n\n    return <div>{child}</div>;\n  }\n}\n\nexport default withCookies(withRouter(Game));\n","import React from 'react';\nimport './App.css';\n// import io from 'socket.io-client'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Header } from './components/Header/Header';\nimport { Landing } from './components/Landing/Landing';\nimport Game from './components/Game/Game';\n\ninterface AppProps {}\ninterface AppState {}\n\nclass App extends React.Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <Landing />\n          </Route>\n          <Route path=\"/game/:id\">\n            <Game />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}