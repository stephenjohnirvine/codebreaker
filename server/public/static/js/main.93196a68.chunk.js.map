{"version":3,"sources":["components/Header.tsx","components/Landing.tsx","components/Players.tsx","components/GameLobby.tsx","components/YourCypher.tsx","components/TeamHistory.tsx","components/CreateTransmission.tsx","components/GuessCode.tsx","components/TransmissionSent.tsx","components/WaitingForTransmission.tsx","components/GuessSubmitted.tsx","components/YourTeam.tsx","components/OtherTeam.tsx","components/GameStatus.tsx","components/GameRunning.tsx","components/GameOver.tsx","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","axios","defaults","proxy","host","port","Landing","history","useHistory","onClick","get","then","gameId","push","data","catch","err","console","error","Players","players","colSpan","map","player","key","id","name","GameLobby","props","me","find","myId","undefined","Error","gameCanStart","length","every","disabled","value","style","width","onChange","event","onNameChange","target","onGameStart","YourCypher","cypher","TeamHistory","tableContents","turns","turn","c","code","idxs","findIndex","num","transmission","row","index","CreateTransmission","onSend","useState","code0","setCode0","code1","setCode1","code2","setCode2","GuessCode","onGuess","setCode","v","Number","isNaN","validInput","input","validInputs","TransmissionSent","WaitingForTransmission","GuessSubmitted","guess","YourTeam","contextComponent","game","team","onTransmit","currentTurn","currentStatus","encryptor","guesses","teamTurnHistory","filter","type","encryptorTeam","OtherTeam","GameStatus","Math","floor","interceptions","transmission_fails","GameRunning","onTeamGuess","myTeam","red","otherTeam","GameOver","winner","Game","socket","state","this","io","window","addEventListener","componentCleanup","on","setState","others","p","removeEventListener","emit","disconnect","close","child","bind","React","Component","withRouter","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.93196a68.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => (\n    <div><h1>Codebreaker!</h1></div>\n);\n\n\n\n\n","import React from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\naxios.defaults.proxy = {\n  host: 'localhost',\n  port: 3001,\n};\n\nexport const Landing = () => {\n  const history = useHistory();\n\n  const newGame = () => {\n    axios\n      .get('/new')\n      .then((gameId) => {\n        history.push(`/game/${gameId.data}`);\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return <button onClick={newGame}>Start New Game</button>;\n};\n","import React from 'react';\n\nimport { Player } from '../types/player';\n\ninterface PlayersProps {\n  players: Player[];\n}\n\nexport const Players = ({ players }: PlayersProps) => (\n  <table>\n    <thead>\n      <tr>\n        <th colSpan={2}>Players</th>\n      </tr>\n      <tr>\n        <th>ID</th>\n        <th>Name</th>\n      </tr>\n    </thead>\n    <tbody>\n      {players.map((player: any) => {\n        return (\n          <tr key={player.id}>\n            <td>{player.id}</td>\n            <td>{player.name}</td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { Players } from './Players';\nimport { Player } from '../types/player';\n\nexport interface GameLobbyProps {\n  players: Player[];\n  myId: number;\n  onNameChange: (name: string) => void;\n  onGameStart: () => void;\n}\n\nexport const GameLobby = (props: GameLobbyProps) => {\n  const me = props.players.find((player) => player.id === props.myId);\n  if (me === undefined) {\n    throw new Error('Me no exist');\n  }\n\n  const gameCanStart: boolean =\n    props.players.length > 3 &&\n    props.players.every((player) => player.name !== '');\n\n  return (\n    <div>\n      <h3>Waiting for players to join...</h3>\n      <p>\n        Game link:\n        <input\n          disabled\n          value=\"http://localhost:3000/lobby/1\"\n          style={{ width: '300px' }}\n        />\n      </p>\n      <p>\n        Please enter your name:{' '}\n        <input\n          value={me.name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            props.onNameChange(event.target.value)\n          }\n        />\n      </p>\n      <Players players={props.players} />\n      <button disabled={!gameCanStart} onClick={props.onGameStart}>\n        Start the Game!\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Cypher } from '../types/gameState';\n\nexport type YourCypherProps = {\n  cypher: Cypher;\n};\n\nexport const YourCypher = ({ cypher }: YourCypherProps) => {\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={4}>{`Your team's cypher`}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1</td>\n            <td>2</td>\n            <td>3</td>\n            <td>4</td>\n          </tr>\n          <tr>\n            <td>{cypher[0]}</td>\n            <td>{cypher[1]}</td>\n            <td>{cypher[2]}</td>\n            <td>{cypher[3]}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { CompletedTurn } from '../types/gameState';\n\nexport type TeamHistoryProps = {\n  turns: CompletedTurn[];\n};\n\nexport const TeamHistory = ({ turns }: TeamHistoryProps) => {\n  const tableContents = turns.map((turn): [string, string, string, string] => {\n    const c = turn.code;\n    const idxs = [\n      c.findIndex((num) => num === 1),\n      c.findIndex((num) => num === 2),\n      c.findIndex((num) => num === 3),\n      c.findIndex((num) => num === 4),\n    ];\n\n    return [\n      idxs[0] !== -1 ? turn.transmission[idxs[0]] : '',\n      idxs[1] !== -1 ? turn.transmission[idxs[1]] : '',\n      idxs[2] !== -1 ? turn.transmission[idxs[2]] : '',\n      idxs[3] !== -1 ? turn.transmission[idxs[3]] : '',\n    ];\n  });\n\n  return (\n    <div>\n      <h4>Team transmission history</h4>\n      <table>\n        <thead>\n          <tr>\n            <td>1</td>\n            <td>2</td>\n            <td>3</td>\n            <td>4</td>\n          </tr>\n        </thead>\n        <tbody>\n          {tableContents.map((row, index) => (\n            <tr key={index}>\n              <td>{row[0]}</td>\n              <td>{row[1]}</td>\n              <td>{row[2]}</td>\n              <td>{row[3]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Code, Transmission } from '../types/gameState';\n\ntype CreateTransmissionProps = {\n  code: Code;\n  onSend: (transmission: Transmission) => void;\n};\n\nexport const CreateTransmission = ({\n  code,\n  onSend,\n}: CreateTransmissionProps) => {\n  const [code0, setCode0] = useState('');\n  const [code1, setCode1] = useState('');\n  const [code2, setCode2] = useState('');\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan={3}>Code:</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{code[0]}</td>\n            <td>{code[1]}</td>\n            <td>{code[2]}</td>\n          </tr>\n          <tr>\n            <td>\n              <input onChange={(event) => setCode0(event.target.value)}></input>\n            </td>\n            <td>\n              <input onChange={(event) => setCode1(event.target.value)}></input>\n            </td>\n            <td>\n              <input onChange={(event) => setCode2(event.target.value)}></input>\n            </td>\n          </tr>\n          <tr>\n            <td colSpan={3}>\n              <button id=\"send\" onClick={() => onSend([code0, code1, code2])}>\n                Send\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Code, Transmission } from '../types/gameState';\n\ntype GuessCodeProps = {\n  transmission: Transmission;\n  onGuess: (code: Code) => void;\n};\n\nexport const GuessCode = ({ transmission, onGuess }: GuessCodeProps) => {\n  const [code0, setCode0] = useState<number | undefined>(undefined);\n  const [code1, setCode1] = useState<number | undefined>(undefined);\n  const [code2, setCode2] = useState<number | undefined>(undefined);\n\n  const setCode = (\n    setCode: typeof setCode0\n  ): ((event: React.ChangeEvent<HTMLInputElement>) => void) => {\n    return (event) => {\n      const v = Number(event.target.value);\n\n      if (isNaN(v)) {\n        setCode(undefined);\n        return;\n      }\n\n      setCode(v);\n    };\n  };\n\n  const validInput = (input: number | undefined): boolean => {\n    if (input === undefined) {\n      return false;\n    }\n\n    return input > 0 && input <= 4;\n  };\n\n  const validInputs =\n    validInput(code0) && validInput(code1) && validInput(code2);\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan={3}>Transmission:</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{transmission[0]}</td>\n            <td>{transmission[1]}</td>\n            <td>{transmission[2]}</td>\n          </tr>\n          <tr>\n            <td>\n              <input onChange={setCode(setCode0)}></input>\n            </td>\n            <td>\n              <input onChange={setCode(setCode1)}></input>\n            </td>\n            <td>\n              <input onChange={setCode(setCode2)}></input>\n            </td>\n          </tr>\n          <tr>\n            <td colSpan={3}>\n              <button\n                id=\"send\"\n                disabled={!validInputs}\n                onClick={() => {\n                  // Button is disabled if they are not valid\n                  onGuess([code0, code1, code2] as Code);\n                }}\n              >\n                Send\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Code, Transmission } from '../types/gameState';\n\ntype TransmissionSentProps = {\n  code: Code;\n  transmission: Transmission;\n};\n\nexport const TransmissionSent = ({\n  code,\n  transmission,\n}: TransmissionSentProps) => {\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan={3}>Sent Transmission:</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{code[0]}</td>\n            <td>{code[1]}</td>\n            <td>{code[2]}</td>\n          </tr>\n          <tr>\n            <td>\n              <input disabled value={transmission[0]} />\n            </td>\n            <td>\n              <input disabled value={transmission[1]} />\n            </td>\n            <td>\n              <input disabled value={transmission[2]} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const WaitingForTransmission = () => (\n  <div>Waiting for transmission...</div>\n);\n","import React from 'react';\nimport { Code, Transmission } from '../types/gameState';\n\ntype GuessSubmittedProps = {\n  guess: Code;\n  transmission: Transmission;\n};\n\nexport const GuessSubmitted = ({\n  guess,\n  transmission,\n}: GuessSubmittedProps) => {\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td colSpan={3}>Guess Submitted:</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{transmission[0]}</td>\n            <td>{transmission[1]}</td>\n            <td>{transmission[2]}</td>\n          </tr>\n          <tr>\n            <td>\n              <input disabled value={guess[0]} />\n            </td>\n            <td>\n              <input disabled value={guess[1]} />\n            </td>\n            <td>\n              <input disabled value={guess[2]} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  GameState,\n  TeamID,\n  PlayerID,\n  CompletedTurn,\n  Transmission,\n  Code,\n} from '../types/gameState';\nimport { YourCypher } from './YourCypher';\nimport { TeamHistory } from './TeamHistory';\nimport { CreateTransmission } from './CreateTransmission';\nimport { GuessCode } from './GuessCode';\nimport { TransmissionSent } from './TransmissionSent';\nimport { WaitingForTransmission } from './WaitingForTransmission';\nimport { GuessSubmitted } from './GuessSubmitted';\n\nexport type YourTeamProps = {\n  game: GameState;\n  team: TeamID;\n  me: PlayerID;\n  onTransmit: (transmission: Transmission) => void;\n  onGuess: (code: Code) => void;\n};\n\nexport const YourTeam = ({\n  game,\n  team,\n  me,\n  onTransmit,\n  onGuess,\n}: YourTeamProps) => {\n  const currentTurn = game.history[game.history.length - 1];\n\n  type PlayerStatus =\n    | 'TRANSMITTING'\n    | 'WAITING'\n    | 'GUESSING'\n    | 'TRANSMITTED'\n    | 'GUESSED';\n  const currentStatus: PlayerStatus =\n    currentTurn.encryptor === me\n      ? currentTurn.transmission === undefined\n        ? 'TRANSMITTING'\n        : 'TRANSMITTED'\n      : currentTurn.transmission === undefined\n      ? 'WAITING'\n      : currentTurn.guesses === undefined ||\n        currentTurn.guesses[team] === undefined\n      ? 'GUESSING'\n      : 'GUESSED';\n\n  let contextComponent;\n  if (currentStatus === 'TRANSMITTING') {\n    contextComponent = (\n      <CreateTransmission code={currentTurn.code} onSend={onTransmit} />\n    );\n  } else if (currentStatus === 'TRANSMITTED') {\n    contextComponent = (\n      <TransmissionSent\n        transmission={currentTurn.transmission as Transmission}\n        code={currentTurn.code}\n      />\n    );\n  } else if (currentStatus === 'WAITING') {\n    contextComponent = <WaitingForTransmission />;\n  } else if (currentStatus === 'GUESSING') {\n    contextComponent = (\n      <GuessCode\n        transmission={currentTurn.transmission as Transmission}\n        onGuess={onGuess}\n      />\n    );\n  } else if (currentStatus === 'GUESSED') {\n    contextComponent = (\n      <GuessSubmitted\n        transmission={currentTurn.transmission as Transmission}\n        guess={currentTurn.guesses[team] as Code}\n      />\n    );\n  }\n\n  const teamTurnHistory = game.history.filter(\n    (turn) => turn.type === 'COMPLETE' && turn.encryptorTeam === team\n  ) as CompletedTurn[];\n\n  return (\n    <div>\n      <div>You are on the {team} team!</div>\n      <YourCypher cypher={game[team].cypher} />\n      {contextComponent}\n      <TeamHistory turns={teamTurnHistory} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { GameState, TeamID, CompletedTurn } from '../types/gameState';\nimport { TeamHistory } from './TeamHistory';\n\ntype OtherTeamProps = {\n  game: GameState;\n  team: TeamID;\n};\n\nexport const OtherTeam = ({ game, team }: OtherTeamProps) => {\n  const teamTurnHistory = game.history.filter(\n    (turn) => turn.type === 'COMPLETE' && turn.encryptorTeam === team\n  ) as CompletedTurn[];\n\n  return (\n    <div>\n      <h3>Other Team History</h3>\n      <TeamHistory turns={teamTurnHistory} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { GameState } from '../types/gameState';\n\ntype GameStatusProps = {\n  game: GameState;\n};\n\nexport const GameStatus = ({ game }: GameStatusProps) => {\n  return (\n    <div>\n      <h3>Game Status:</h3>\n      <p>Turn: {Math.floor(game.history.length / 2) + 1}</p>\n      <p>\n        Interceptions: (Red: {game['red'].interceptions}) (Blue:{' '}\n        {game['blue'].interceptions})\n      </p>\n      <p>\n        Failed Transmissions: (Red: {game['red'].transmission_fails}) (Blue:{' '}\n        {game['blue'].transmission_fails})\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { GameState, TeamID, Transmission, Code } from '../types/gameState';\nimport { Player } from '../types/player';\nimport { YourTeam } from './YourTeam';\nimport { OtherTeam } from './OtherTeam';\nimport { GameStatus } from './GameStatus';\n\ninterface GameRunningProps {\n  players: Player[];\n  game: GameState;\n  myId: number;\n  onTeamGuess: (team: TeamID, guess: Code) => void;\n  onTransmit: (transmission: Transmission) => void;\n}\n\nexport const GameRunning = ({\n  game,\n  myId,\n  onTransmit,\n  onTeamGuess,\n}: GameRunningProps) => {\n  const myTeam = game.red.players.find((player) => player === myId)\n    ? 'red'\n    : 'blue';\n\n  const otherTeam = myTeam === 'red' ? 'blue' : 'red';\n\n  return (\n    <div>\n      <YourTeam\n        me={myId}\n        game={game}\n        team={myTeam}\n        onGuess={(code: Code) => onTeamGuess(myTeam, code)}\n        onTransmit={onTransmit}\n      />\n      <OtherTeam team={otherTeam} game={game} />\n      <GameStatus game={game} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TeamID } from '../types/gameState';\n\ntype GameOverProps = {\n  winner: 'draw' | TeamID;\n};\n\nexport const GameOver = ({ winner }: GameOverProps) => {\n  if (winner === 'draw') {\n    return (\n      <div>\n        <h2>Draw!</h2>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h2>The {winner} team has won the game!</h2>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Player } from '../types/player';\nimport { GameState, Code, TeamID, Transmission } from '../types/gameState';\nimport { GameLobby } from './GameLobby';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport { GameRunning } from './GameRunning';\nimport { GameOver } from './GameOver';\n\ntype PathParamsType = {\n  id: string;\n};\n\ntype GameProps = RouteComponentProps<PathParamsType> & {};\ninterface GameReactState {\n  players: Player[];\n  myId: number | 'pending';\n  game: GameState | 'pending';\n}\n\nclass Game extends React.Component<GameProps, GameReactState> {\n  private socket: SocketIOClient.Socket | undefined;\n\n  public constructor(props: GameProps) {\n    super(props);\n\n    this.state = {\n      players: [],\n      myId: 'pending',\n      game: 'pending',\n    };\n  }\n\n  componentDidMount() {\n    this.socket = io();\n    //   this.socket = io(`/game/${this.props.match.params.id}`);\n    window.addEventListener('beforeunload', this.componentCleanup);\n\n    this.socket.on('new player', (player: Player) => {\n      this.setState((state) => ({\n        players: [...state.players, player],\n      }));\n    });\n    this.socket.on('welcome', (player: Player) => {\n      this.setState({\n        myId: player.id,\n      });\n    });\n    this.socket.on('update player', (player: Player) => {\n      const others = this.state.players.filter((p) => p.id !== player.id);\n      this.setState({\n        players: [...others, player],\n      });\n    });\n    this.socket.on('player left', (player: Player) => {\n      const others = this.state.players.filter((p) => p.id !== player.id);\n      this.setState({\n        players: others,\n      });\n    });\n    this.socket.on('game state', (game: GameState) => {\n      this.setState({\n        game,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.componentCleanup();\n    window.removeEventListener('beforeunload', this.componentCleanup); // remove the event handler for normal unmounting\n  }\n\n  componentCleanup() {\n    if (this.socket === undefined) {\n      throw new Error('No socket connection when unmounting');\n    }\n    this.socket.emit('disconnect');\n    this.socket.disconnect();\n    this.socket.close();\n  }\n\n  private onNameChange(name: string) {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n    this.socket.emit('player name', name);\n  }\n\n  private onGameStart() {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n    this.socket.emit('start game');\n  }\n\n  private onTeamGuess(team: TeamID, guess: Code) {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n\n    this.socket.emit('guess', { team, guess });\n  }\n\n  private onTransmit(transmission: Transmission) {\n    if (this.socket === undefined) {\n      throw new Error('Callback called before socket connection established');\n    }\n\n    this.socket.emit('transmission', transmission);\n  }\n\n  public render() {\n    const notFullyConnected =\n      this.socket === undefined ||\n      this.state.myId === 'pending' ||\n      this.state.players.findIndex(\n        (player) => player.id === this.state.myId\n      ) === -1 ||\n      this.state.game === 'pending';\n\n    let child;\n    if (notFullyConnected) {\n      child = <div>Connecting ...</div>;\n    } else if ((this.state.game as GameState).state === 'LOBBY') {\n      child = (\n        <GameLobby\n          players={this.state.players}\n          myId={this.state.myId as number}\n          onNameChange={this.onNameChange.bind(this)}\n          onGameStart={this.onGameStart.bind(this)}\n        />\n      );\n    } else if ((this.state.game as GameState).state === 'RUNNING') {\n      child = (\n        <GameRunning\n          game={this.state.game as GameState}\n          players={this.state.players}\n          myId={this.state.myId as number}\n          onTeamGuess={this.onTeamGuess.bind(this)}\n          onTransmit={this.onTransmit.bind(this)}\n        />\n      );\n    } else if ((this.state.game as GameState).state === 'FINISHED') {\n      child = (\n        <GameOver\n          winner={(this.state.game as GameState).winner as 'draw' | TeamID}\n        />\n      );\n    }\n\n    return <div>{child}</div>;\n    // <Teams players={this.state.players} />\n  }\n}\n\nexport default withRouter(Game);\n","import React from 'react';\nimport './App.css';\n// import io from 'socket.io-client'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { Landing } from './components/Landing';\nimport Game from './components/Game';\n\ninterface AppProps {}\ninterface AppState {}\n\nclass App extends React.Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <Landing />\n          </Route>\n          <Route path=\"/game/:id\">\n            <Game />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}